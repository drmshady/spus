# -*- coding: utf-8 -*-
"""Untitled29.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/175PonR7Nc8EVaVO7AdmE3Fnu5S9OSq7r
"""

# -*- coding: utf-8 -*-
"""SPUS Quantitative Analyzer Dashboard ‚Äì Clean Version"""

import streamlit as st
import pandas as pd
import os
import time
from datetime import datetime
import sys
import logging
from concurrent.futures import ThreadPoolExecutor, as_completed
import openpyxl
from openpyxl.styles import Font

# ---- Path Fix ----
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
if BASE_DIR not in sys.path:
    sys.path.insert(0, BASE_DIR)

# ---- Import spus.py functions ----
try:
    from spus import (
        load_config,
        fetch_spus_tickers,
        process_ticker,
        calculate_support_resistance,
        calculate_financials_and_fair_price
    )
except Exception as e:
    st.error(f"‚ùå Failed to import 'spus.py': {e}")
    st.stop()

# ---- Optional: reportlab check ----
try:
    from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
    from reportlab.lib.styles import getSampleStyleSheet
    from reportlab.lib import colors
    from reportlab.lib.pagesizes import landscape, letter
    from reportlab.lib.units import inch
    REPORTLAB_AVAILABLE = True
except ImportError:
    REPORTLAB_AVAILABLE = False
    logging.warning("ReportLab not available ‚Äì skipping PDF export.")

# ---- Cache Excel Loading ----
@st.cache_data
def load_excel_data(excel_path):
    abs_excel_path = os.path.join(BASE_DIR, excel_path)
    if not os.path.exists(abs_excel_path):
        return None, None
    try:
        mod_time = os.path.getmtime(abs_excel_path)
        xls = pd.ExcelFile(abs_excel_path)
        sheets = {s: pd.read_excel(xls, sheet_name=s, index_col=0) for s in xls.sheet_names}
        return sheets, mod_time
    except Exception as e:
        st.error(f"Error reading Excel: {e}")
        return None, None

# ---- Improved Styling ----
def style_dataframe_text_only(df):
    """Apply color formatting for text and numeric columns."""
    def highlight_text(val):
        val_str = str(val).lower()
        if 'undervalued' in val_str or 'bullish' in val_str:
            return 'color: #008000'  # green
        elif 'overvalued' in val_str or 'bearish' in val_str:
            return 'color: #B00000'  # red
        elif 'support' in val_str:
            return 'color: #004FB0'  # blue
        return ''

    styled = df.style
    style_cols = [c for c in ['Valuation (Graham)', 'MACD_Signal', 'Price vs. Levels'] if c in df.columns]
    if style_cols:
        styled = styled.apply(lambda x: x.map(highlight_text), subset=style_cols)

    numeric_cols = [c for c in ['Final Quant Score', 'Risk/Reward Ratio', '1-Year Momentum (%)'] if c in df.columns]
    for col in numeric_cols:
        styled = styled.background_gradient(subset=[col], cmap='Greens')

    return styled

# ---- MAIN Streamlit UI ----
def main():
    st.set_page_config(page_title="SPUS Quantitative Analysis", layout="wide")
    st.title("üìä SPUS Quantitative Analysis Dashboard")
    st.markdown("Interactive dashboard for SPUS quantitative analysis (Value, Momentum, Quality, Size).")

    CONFIG = load_config('config.json')
    if CONFIG is None:
        st.error("‚ùå Missing config.json. Please place it in the same folder.")
        st.stop()

    EXCEL_FILE = CONFIG.get('EXCEL_FILE_PATH', './spus_analysis_results.xlsx')
    excel_path = os.path.join(BASE_DIR, EXCEL_FILE)

    # ---- Sidebar ----
    with st.sidebar:
        st.image("https://www.sp-funds.com/wp-content/uploads/2022/02/SP-Funds-Logo-Primary-Wht-1.svg", width=180)
        st.header("‚öôÔ∏è Controls")

        if st.button("Run Full Analysis (ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑŸÉÿßŸÖŸÑ)", type="primary"):
            with st.spinner("Running full analysis... please wait ‚è≥"):
                from streamlit_app import run_full_analysis  # imported dynamically
                success = run_full_analysis(CONFIG)
                if success:
                    st.cache_data.clear()
                    st.success("‚úÖ Analysis completed successfully!")
                    st.rerun()
                else:
                    st.error("‚ùå Analysis failed. Check logs for details.")

        st.divider()
        st.info("Displays last generated analysis. Click the button above to refresh data.")

        # üîπ Direct Download Links
        if os.path.exists(excel_path):
            st.download_button(
                label="‚¨áÔ∏è Download Excel Report",
                data=open(excel_path, "rb"),
                file_name=os.path.basename(excel_path),
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

            pdf_files = sorted([f for f in os.listdir(BASE_DIR) if f.endswith('.pdf')],
                               key=lambda x: os.path.getmtime(os.path.join(BASE_DIR, x)), reverse=True)
            if pdf_files:
                latest_pdf = pdf_files[0]
                pdf_path = os.path.join(BASE_DIR, latest_pdf)
                st.download_button(
                    label="üìÑ Download Latest PDF Report",
                    data=open(pdf_path, "rb"),
                    file_name=latest_pdf,
                    mime="application/pdf"
                )

    # ---- Main Display ----
    data_sheets, mod_time = load_excel_data(EXCEL_FILE)
    if data_sheets is None:
        st.warning("‚ö†Ô∏è No analysis file found yet.")
        st.info("Click 'Run Full Analysis' to generate reports.")
        return

    st.success(f"Showing data from last analysis: {datetime.fromtimestamp(mod_time).strftime('%Y-%m-%d %H:%M:%S')}")

    tab_titles = list(data_sheets.keys())
    if "All Results" in tab_titles:
        tab_titles.remove("All Results")
        tab_titles.append("All Results")

    tabs = st.tabs(tab_titles)

    for i, sheet_name in enumerate(tab_titles):
        with tabs[i]:
            st.subheader(sheet_name)
            df_to_show = data_sheets[sheet_name].copy()

            # ---- Simplify table view ----
            important_cols = [
                'Ticker', 'Sector', 'Last Price', 'Fair Price (Graham)',
                'Valuation (Graham)', 'MACD_Signal', 'Trend (50/200 Day MA)',
                'Price vs. Levels', 'Risk/Reward Ratio', 'Shares to Buy ($50 Risk)',
                'Dividend Yield (%)', '1-Year Momentum (%)', 'Final Quant Score'
            ]
            existing_cols = [c for c in important_cols if c in df_to_show.columns]
            if existing_cols:
                df_to_show = df_to_show[existing_cols]

            if 'Final Quant Score' in df_to_show.columns:
                df_to_show = df_to_show.sort_values('Final Quant Score', ascending=False)

            # ---- Charts for key sheets ----
            chart_df = df_to_show.copy().reset_index()

            if sheet_name == 'Top 20 Final Quant Score' and 'Final Quant Score' in chart_df.columns:
                chart_df['Final Quant Score'] = pd.to_numeric(chart_df['Final Quant Score'], errors='coerce')
                chart_df.dropna(subset=['Final Quant Score'], inplace=True)
                st.bar_chart(chart_df.sort_values('Final Quant Score', ascending=False),
                             x='Ticker', y='Final Quant Score', color="#00A600")

            elif sheet_name == 'Top Quant & High R-R' and 'Risk/Reward Ratio' in chart_df.columns:
                chart_df['Risk/Reward Ratio'] = pd.to_numeric(chart_df['Risk/Reward Ratio'], errors='coerce')
                chart_df.dropna(subset=['Risk/Reward Ratio'], inplace=True)
                st.bar_chart(chart_df.sort_values('Risk/Reward Ratio', ascending=False),
                             x='Ticker', y='Risk/Reward Ratio', color="#004FB0")

            elif sheet_name == 'Top 10 by Market Cap (SPUS)' and 'Market Cap' in chart_df.columns:
                chart_df['Market Cap'] = pd.to_numeric(chart_df['Market Cap'], errors='coerce')
                chart_df.dropna(subset=['Market Cap'], inplace=True)
                st.bar_chart(chart_df.sort_values('Market Cap', ascending=False),
                             x='Ticker', y='Market Cap')

            st.divider()
            st.dataframe(style_dataframe_text_only(df_to_show), use_container_width=True)

            csv = df_to_show.to_csv(index=True).encode('utf-8')
            st.download_button(
                label=f"Download {sheet_name} as CSV",
                data=csv,
                file_name=f"{sheet_name.replace(' ', '_')}.csv",
                mime='text/csv',
            )

if __name__ == "__main__":
    main()